name: Django App CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Check formatting with black
        run: black --check .
        continue-on-error: true 
      - name: Check imports with isort
        run: isort --check-only --profile black .
        continue-on-error: true 
  
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-django pytest-cov
      - name: Verify coverage installation
        run: |
          source venv/bin/activate
          python -c "import coverage; print(coverage.__version__)"
      - name: Run tests with coverage
        run: |
          source venv/bin/activate
          python -m coverage run run_django_tests.py
          python -m coverage report
          python -m coverage xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push web image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/django/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fitness-booking-web:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/fitness-booking-web:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/fitness-booking-web:buildcache,mode=max
      
      - name: Build and push nginx image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/nginx/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fitness-booking-nginx:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/fitness-booking-nginx:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/fitness-booking-nginx:buildcache,mode=max
